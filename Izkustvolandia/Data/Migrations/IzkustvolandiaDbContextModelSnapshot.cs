// <auto-generated />
using System;
using Izkustvolandia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Izkustvolandia.Data.Migrations
{
    [DbContext(typeof(IzkustvolandiaDbContext))]
    partial class IzkustvolandiaDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Izkustvolandia.Domain.Cart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.DrawingTechnique", b =>
                {
                    b.Property<int>("DrawingTechniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrawingTechniqueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrawingTechniqueId");

                    b.ToTable("DrawingTechniques");

                    b.HasData(
                        new
                        {
                            DrawingTechniqueId = 1,
                            Name = "Маслени бои"
                        },
                        new
                        {
                            DrawingTechniqueId = 2,
                            Name = "Акварел"
                        },
                        new
                        {
                            DrawingTechniqueId = 3,
                            Name = "Темпера"
                        },
                        new
                        {
                            DrawingTechniqueId = 4,
                            Name = "Графика"
                        },
                        new
                        {
                            DrawingTechniqueId = 5,
                            Name = "Поантилизъм"
                        },
                        new
                        {
                            DrawingTechniqueId = 6,
                            Name = "Фреска"
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            Name = "Гуаш"
                        },
                        new
                        {
                            DrawingTechniqueId = 8,
                            Name = "Пастел"
                        },
                        new
                        {
                            DrawingTechniqueId = 9,
                            Name = "Дигитална живопис"
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Портрет"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Пейзаж"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Натюрморт"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Историческа живопис"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Религиозно изкуство"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Жанрова живопис"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Анималистика"
                        },
                        new
                        {
                            GenreId = 8,
                            Name = "Сюрреализъм"
                        },
                        new
                        {
                            GenreId = 9,
                            Name = "Абстрактно изкуство"
                        },
                        new
                        {
                            GenreId = 10,
                            Name = "Кубизъм"
                        },
                        new
                        {
                            GenreId = 11,
                            Name = "Импресионизъм"
                        },
                        new
                        {
                            GenreId = 12,
                            Name = "Неоимпресионизъм"
                        },
                        new
                        {
                            GenreId = 13,
                            Name = "Поп арт"
                        },
                        new
                        {
                            GenreId = 14,
                            Name = "Миниатюра"
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DeliveryOn")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Author = "Анна Петрова",
                            CreatedOn = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Размер на платното 15х20 см. Продава се с рамка с дебелина 1 см. Нарисувана с акрилни бои върху платно с четка.",
                            Height = 20.0,
                            ImageUrls = "[\"mother-product-2-1.jpg\",\"mother-product-2-2.jpg\",\"mother-product-2-3.jpg\",\"mother-product-2-4.jpg\",\"mother-product-2-5.jpg\",\"mother-product-2-6.jpg\",\"mother-product-2-7.jpg\"]",
                            IsDeleted = false,
                            Name = "Майчина милувка 3",
                            Price = 120.00m,
                            Width = 15.0
                        },
                        new
                        {
                            ProductId = 2,
                            Author = "Анна Петрова",
                            CreatedOn = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Майчина милувка“ 5 е емоционална и изразителна картина, нарисувана с акрилни бои върху платно с помощта на четка и шпакли. Комбинацията от деликатни мазки и богата текстура придава дълбочина и характер на всяка линия. Платното е с размер 18х24 см и се предлага с елегантна рамка с дебелина 2 см, която допълва усещането за завършеност и уют.",
                            Height = 24.0,
                            ImageUrls = "[\"mother-product-1-1.jpg\",\"mother-product-1-2.jpg\",\"mother-product-1-3.jpg\",\"mother-product-1-4.jpg\"]",
                            IsDeleted = false,
                            Name = "Майчина милувка 5",
                            Price = 160.00m,
                            Width = 18.0
                        },
                        new
                        {
                            ProductId = 3,
                            Author = "Мария Николова",
                            CreatedOn = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Една“ 1 е елегантна творба, носеща усещане за нежност и самота. Създадена с акрилни бои върху платно, картината съчетава фини четкови мазки и текстури, постигнати с помощта на шпакли. Размерът ѝ е 15х20 см, а рамката с дебелина 1 см придава завършен и стилен вид.",
                            Height = 20.0,
                            ImageUrls = "[\"one-1-product-4-1.jpg\",\"one-1-product-4-2.jpg\",\"one-1-product-4-3.jpg\",\"one-1-product-4-4.jpg\",\"one-1-product-4-5.jpg\",\"one-1-product-4-6.jpg\",\"one-1-product-4-7.jpg\"]",
                            IsDeleted = false,
                            Name = "Една 1",
                            Price = 110.00m,
                            Width = 15.0
                        },
                        new
                        {
                            ProductId = 4,
                            Author = "Никол Симеонова",
                            CreatedOn = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Една“ е картина, която разказва история чрез усещане и текстура. Създадена с акрилни бои върху платно, комбинира изразителни четкови мазки и грубата чувственост на шпаклата. Композицията е с размер 15х20 см и е обрамчена с деликатна 1-сантиметрова рамка, която подчертава емоционалната ѝ наситеност.",
                            Height = 20.0,
                            ImageUrls = "[\"one-product-3-1.jpg\",\"one-product-3-2.jpg\",\"one-product-3-3.jpg\",\"one-product-3-4.jpg\",\"one-product-3-5.jpg\",\"one-product-3-6.jpg\"]",
                            IsDeleted = false,
                            Name = "Една",
                            Price = 105.00m,
                            Width = 15.0
                        },
                        new
                        {
                            ProductId = 5,
                            Author = "Елеонора Костова",
                            CreatedOn = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Ти и аз“ 6 е нежна и хармонична картина, изразяваща силата на връзката между две души. Нарисувана с акрилни бои върху платно, използвайки фини четки, тя създава усещане за близост и топлина. Композицията е с квадратна форма – 20х20 см – и се предлага с елегантна рамка с дебелина 2 см, която допълва усещането за завършеност.",
                            Height = 20.0,
                            ImageUrls = "[\"you-and-me-product-5-1.jpg\",\"you-and-me-product-5-2.jpg\",\"you-and-me-product-5-3.jpg\",\"you-and-me-product-5-4.jpg\",\"you-and-me-product-5-5.jpg\",\"you-and-me-product-5-6.jpg\"]",
                            IsDeleted = false,
                            Name = "Ти и аз 6",
                            Price = 135.00m,
                            Width = 20.0
                        },
                        new
                        {
                            ProductId = 6,
                            Author = "Стефан Велинов",
                            CreatedOn = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Релакс“ 2 е съвременна композиция, която улавя спокойствието на един миг на уединение. Картината е изпълнена с акрилни бои върху платно, използвайки изразителни движения на шпаклата, което ѝ придава характер и дълбочина. С размер 20х25 см и стилна рамка с дебелина 2 см, творбата е подходящ акцент за всеки уютен интериор.",
                            Height = 25.0,
                            ImageUrls = "[\"relax-product-6-1.jpg\",\"relax-product-6-2.jpg\",\"relax-product-6-3.jpg\",\"relax-product-6-4.jpg\",\"relax-product-6-5.jpg\",\"relax-product-6-6.jpg\"]",
                            IsDeleted = false,
                            Name = "Релакс 2",
                            Price = 145.00m,
                            Width = 20.0
                        },
                        new
                        {
                            ProductId = 7,
                            Author = "Валери Димитров",
                            CreatedOn = new DateTime(2024, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„В гората“ 2 е живописен пейзаж, който пренася зрителя в сърцето на природата. Нарисувана с акрилни бои върху платно с помощта на четка и шпакли, картината комбинира фини детайли с богата текстура, за да улови магията на горската тишина. С размер 30х40 см и елегантна рамка с дебелина 2 см, творбата е идеален избор за любителите на природата и уюта.",
                            Height = 40.0,
                            ImageUrls = "[\"in-the-forest-product-7-1.jpg\",\"in-the-forest-product-7-2.jpg\",\"in-the-forest-product-7-3.jpg\",\"in-the-forest-product-7-4.jpg\",\"in-the-forest-product-7-5.jpg\",\"in-the-forest-product-7-6.jpg\"]",
                            IsDeleted = false,
                            Name = "В гората 2",
                            Price = 180.00m,
                            Width = 30.0
                        },
                        new
                        {
                            ProductId = 8,
                            Author = "Калина Стоянова",
                            CreatedOn = new DateTime(2024, 3, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Радост“ е експресивна композиция от три отделни платна, обединени от цветна енергия и усещане за позитивност. Всяко платно е с размер 20х20 см, изрисувано с акрилни бои, използвайки четка и шпакли. Богатата текстура и живите цветове създават чувство на движение и хармония. Композицията е монтирана върху дървена подрамка с дебелина 2 см и е идеален избор за модерния интериор.",
                            Height = 20.0,
                            ImageUrls = "[\"radost-product-8-1.jpg\",\"radost-product-8-2.jpg\",\"radost-product-8-3.jpg\"]",
                            IsDeleted = false,
                            Name = "Радост",
                            Price = 210.00m,
                            Width = 60.0
                        },
                        new
                        {
                            ProductId = 9,
                            Author = "Радостина Тодорова",
                            CreatedOn = new DateTime(2024, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Идилия“ е спокойна и вдъхновяваща творба, която пресъздава усещането за хармония и уют. Нарисувана с акрилни бои върху платно с размери 40х30 см, тя съчетава топли тонове и плавни преходи, за да създаде чувство на уравновесеност и съзерцание. Идеален избор за всеки, който търси изкуство с успокояващо присъствие.",
                            Height = 30.0,
                            ImageUrls = "[\"idiliya-product-9-1.jpg\",\"idiliya-product-9-2.jpg\",\"idiliya-product-9-3.jpg\",\"idiliya-product-9-4.jpg\",\"idiliya-product-9-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Идилия",
                            Price = 190.00m,
                            Width = 40.0
                        },
                        new
                        {
                            ProductId = 10,
                            Author = "Елица Ангелова",
                            CreatedOn = new DateTime(2024, 4, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Тишина“ е дълбоко емоционална картина, която улавя усещането за вътрешен мир и съзерцание. Създадена с акрилни бои върху платно, използвайки подрамка, четка и шпакла, творбата съчетава текстура и плавни преходи, които приканват зрителя към спокойствие. Размерите ѝ са 40х30 см, а рамката с дебелина 2 см подчертава нейното естетическо въздействие.",
                            Height = 30.0,
                            ImageUrls = "[\"tishina-product-10-1.jpg\",\"tishina-product-10-2.jpg\",\"tishina-product-10-3.jpg\"]",
                            IsDeleted = false,
                            Name = "Тишина",
                            Price = 195.00m,
                            Width = 40.0
                        },
                        new
                        {
                            ProductId = 11,
                            Author = "Александър Стефанов",
                            CreatedOn = new DateTime(2024, 4, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Надпревара“ е впечатляваща двукомпонентна композиция, излъчваща движение, енергия и контраст. Изпълнена с акрилни бои върху две платна с подрамка, творбата използва четка и шпакла, за да изгради богата текстура и визуален ритъм. Всяко платно е с размер 50х100 см, а рамките с дебелина 2 см придават завършеност и стил. „Надпревара“ е идеален акцент за модерен интериор с характер.",
                            Height = 50.0,
                            ImageUrls = "[\"nadprevara-product-11-1.jpg\",\"nadprevara-product-11-2.jpg\",\"nadprevara-product-11-3.jpg\",\"nadprevara-product-11-4.jpg\",\"nadprevara-product-11-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Надпревара",
                            Price = 360.00m,
                            Width = 100.0
                        },
                        new
                        {
                            ProductId = 12,
                            Author = "Ирина Михайлова",
                            CreatedOn = new DateTime(2024, 4, 4, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Мелодия“ е нежна триптих-композиция, която визуализира ритъма на емоциите чрез цвят и форма. Изградена от три платна с размер 20х20 см всяко, картината е нарисувана с акрилни бои, използвайки четка и шпакла за постигане на динамична текстура. Дървената подрамка с дебелина 2 см придава на композицията завършен вид, който е едновременно модерен и изразителен.",
                            Height = 20.0,
                            ImageUrls = "[\"melodiya-product-12-1.jpg\",\"melodiya-product-12-2.jpg\",\"melodiya-product-12-3.jpg\",\"melodiya-product-12-4.jpg\",\"melodiya-product-12-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Мелодия",
                            Price = 225.00m,
                            Width = 60.0
                        },
                        new
                        {
                            ProductId = 13,
                            Author = "Яна Христова",
                            CreatedOn = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Кралица“ е внушителна и изразителна творба, която олицетворява сила, достойнство и вътрешна красота. Изпълнена с акрилни бои върху платно с помощта на четка и шпакли, картината съчетава текстура и емоция в изискана композиция. С размери 40х50 см и рамка с дебелина 2 см, „Кралица“ е истинско бижу за всеки интериор с характер.",
                            Height = 50.0,
                            ImageUrls = "[\"kralitsa-product-13-1.jpg\",\"kralitsa-product-13-2.jpg\",\"kralitsa-product-13-3.jpg\",\"kralitsa-product-13-4.jpg\"]",
                            IsDeleted = false,
                            Name = "Кралица",
                            Price = 240.00m,
                            Width = 40.0
                        },
                        new
                        {
                            ProductId = 14,
                            Author = "Камен Велев",
                            CreatedOn = new DateTime(2024, 4, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Миг“ е експресивна картина, уловила състоянието на внезапно вдъхновение. Създадена с акрилни бои върху платно с помощта на четка и шпакла, творбата впечатлява с драматична текстура и силно излъчване. С размер 50х60 см и рамка с дебелина 2 см, тя е идеален избор за модерен интериор, който търси изкуство със заряд.",
                            Height = 50.0,
                            ImageUrls = "[\"mig-product-14-1.jpg\",\"mig-product-14-2.jpg\",\"mig-product-14-3.jpg\",\"mig-product-14-4.jpg\",\"mig-product-14-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Миг",
                            Price = 260.00m,
                            Width = 60.0
                        },
                        new
                        {
                            ProductId = 15,
                            Author = "Росица Минчева",
                            CreatedOn = new DateTime(2024, 4, 7, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Ангели“ е изтънчена композиция от четири миниатюрни платна, съчетаваща финес, духовност и текстура. Всяко от платната е с размер 10х10 см и е изрисувано с акрилни бои, с помощта на четка и шпакла. Композицията е обогатена със златно фолио и моделираща паста, които придават блясък и обем. Рамкирана с 2-сантиметрова рамка, „Ангели“ е съвършен акцент за изискан и светъл интериор.",
                            Height = 10.0,
                            ImageUrls = "[\"angeli-product-15-1.jpg\",\"angeli-product-15-2.jpg\",\"angeli-product-15-3.jpg\",\"angeli-product-15-4.jpg\",\"angeli-product-15-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Ангели",
                            Price = 200.00m,
                            Width = 40.0
                        },
                        new
                        {
                            ProductId = 16,
                            Author = "Росица Минчева",
                            CreatedOn = new DateTime(2024, 4, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Зелен ангел“ е фина и изразителна миниатюра, излъчваща мекота и светлина. Нарисувана с акрилни бои върху платно с размер 10х10 см, тя е създадена с четка и шпакла, а златното фолио и моделиращата паста ѝ придават блясък и дълбочина. Завършена с елегантна 2-сантиметрова рамка, тази творба е истинско бижу за всяко пространство.",
                            Height = 10.0,
                            ImageUrls = "[\"zelen-angel-product-16-1.jpg\",\"zelen-angel-product-16-2.jpg\",\"zelen-angel-product-16-3.jpg\",\"zelen-angel-product-16-4.jpg\",\"zelen-angel-product-16-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Зелен ангел",
                            Price = 95.00m,
                            Width = 10.0
                        },
                        new
                        {
                            ProductId = 17,
                            Author = "Маргарита Алексиева",
                            CreatedOn = new DateTime(2024, 4, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Космополитна жена 3“ е модерна миниатюра, която съчетава елегантност, индивидуалност и градски дух. Нарисувана с акрилни бои върху платно с размер 12х18 см, творбата използва четка и шпакла, за да изрази силен характер чрез текстура и детайл. Завършена с изискана рамка с дебелина 2 см, тази картина е идеален акцент за съвременен интериор с настроение.",
                            Height = 18.0,
                            ImageUrls = "[\"kosmopolitna-zhena-product-17-1.jpg\",\"kosmopolitna-zhena-product-17-2.jpg\",\"kosmopolitna-zhena-product-17-3.jpg\"]",
                            IsDeleted = false,
                            Name = "Космополитна жена 3",
                            Price = 130.00m,
                            Width = 12.0
                        },
                        new
                        {
                            ProductId = 18,
                            Author = "Теодора Златева",
                            CreatedOn = new DateTime(2024, 4, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Пристан“ е топла и емоционална картина, която символизира мястото, където човек намира покой. Нарисувана с акрилни бои върху платно с размер 20х30 см, използвайки четка, шпакла и моделираща паста, творбата впечатлява с релеф и дълбочина. Завършена с рамка с дебелина 2 см, „Пристан“ е идеално допълнение към интериор, търсещ уют и естетика.",
                            Height = 20.0,
                            ImageUrls = "[\"pristan-product-18-1.jpg\",\"pristan-product-18-2.jpg\",\"pristan-product-18-3.jpg\",\"pristan-product-18-4.jpg\",\"pristan-product-18-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Пристан",
                            Price = 165.00m,
                            Width = 30.0
                        },
                        new
                        {
                            ProductId = 19,
                            Author = "Виктория Йорданова",
                            CreatedOn = new DateTime(2024, 4, 11, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Цветна магия“ е динамична и вдъхновяваща картина, която омагьосва с палитра от ярки цветове и богата текстура. Нарисувана с акрилни бои върху платно с размер 30х30 см, с помощта на четка и шпакла, творбата излъчва енергия и настроение. Завършена с елегантна рамка с дебелина 2 см, тя е перфектен акцент за модерен интериор с артистичен дух.",
                            Height = 30.0,
                            ImageUrls = "[\"cvetna-magiya-product-19-1.jpg\",\"cvetna-magiya-product-19-2.jpg\",\"cvetna-magiya-product-19-3.jpg\",\"cvetna-magiya-product-19-4.jpg\",\"cvetna-magiya-product-19-5.jpg\"]",
                            IsDeleted = false,
                            Name = "Цветна магия",
                            Price = 175.00m,
                            Width = 30.0
                        },
                        new
                        {
                            ProductId = 20,
                            Author = "Силвия Христова",
                            CreatedOn = new DateTime(2024, 4, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Цветя“–1 е нежна и жизнена картина, която улавя елегантната красота на природата в пълен разцвет. Изрисувана с акрилни бои върху платно с помощта на четка, творбата се отличава с мекота и хармония. Размерът ѝ е 30х40 см, а рамката с дебелина 2 см придава завършеност и стил. Подходяща е за всеки дом, който търси свежест и топлота в интериора си.",
                            Height = 30.0,
                            ImageUrls = "[\"cvetya-product-20-1.jpg\",\"cvetya-product-20-2.jpg\",\"cvetya-product-20-3.jpg\",\"cvetya-product-20-4.jpg\",\"cvetya-product-20-5.jpg\",\"cvetya-product-20-6.jpg\"]",
                            IsDeleted = false,
                            Name = "Цветя–1",
                            Price = 185.00m,
                            Width = 40.0
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductDrawingTechnique", b =>
                {
                    b.Property<int>("DrawingTechniqueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("DrawingTechniqueId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDrawingTechniques");

                    b.HasData(
                        new
                        {
                            DrawingTechniqueId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            DrawingTechniqueId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            DrawingTechniqueId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            DrawingTechniqueId = 2,
                            ProductId = 4
                        },
                        new
                        {
                            DrawingTechniqueId = 1,
                            ProductId = 5
                        },
                        new
                        {
                            DrawingTechniqueId = 5,
                            ProductId = 6
                        },
                        new
                        {
                            DrawingTechniqueId = 2,
                            ProductId = 7
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 8
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 9
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 10
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 11
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 12
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 13
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 14
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 15
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 16
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 17
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 18
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 19
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            ProductId = 20
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGenres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            GenreId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            GenreId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            GenreId = 5,
                            ProductId = 4
                        },
                        new
                        {
                            GenreId = 2,
                            ProductId = 5
                        },
                        new
                        {
                            GenreId = 3,
                            ProductId = 6
                        },
                        new
                        {
                            GenreId = 2,
                            ProductId = 7
                        },
                        new
                        {
                            GenreId = 9,
                            ProductId = 8
                        },
                        new
                        {
                            GenreId = 2,
                            ProductId = 9
                        },
                        new
                        {
                            GenreId = 9,
                            ProductId = 10
                        },
                        new
                        {
                            GenreId = 9,
                            ProductId = 11
                        },
                        new
                        {
                            GenreId = 9,
                            ProductId = 12
                        },
                        new
                        {
                            GenreId = 9,
                            ProductId = 13
                        },
                        new
                        {
                            GenreId = 1,
                            ProductId = 14
                        },
                        new
                        {
                            GenreId = 5,
                            ProductId = 15
                        },
                        new
                        {
                            GenreId = 5,
                            ProductId = 16
                        },
                        new
                        {
                            GenreId = 1,
                            ProductId = 17
                        },
                        new
                        {
                            GenreId = 2,
                            ProductId = 18
                        },
                        new
                        {
                            GenreId = 9,
                            ProductId = 19
                        },
                        new
                        {
                            GenreId = 3,
                            ProductId = 20
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "d1cca5f3-7195-4ba7-bcb9-c682e1f3d9c6",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "fa03ea15-377a-459b-8612-e9e478856d5d",
                            Email = "admin@izkustvolandia.com",
                            EmailConfirmed = true,
                            FirstName = "Иван",
                            LastName = "Иванов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IZKUSTVOLANDIA.COM",
                            NormalizedUserName = "ADMIN@IZKUSTVOLANDIA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEDgamrUJQ3rRKu5OrD679t5rjdlaSGpCIbcryqYQS9nniZ/c5tHu9XkLnTfvXIbnhw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "17fb03ec-25ee-4ef3-adaf-cfd6da561e2c",
                            TwoFactorEnabled = false,
                            UserName = "admin@izkustvolandia.com"
                        },
                        new
                        {
                            Id = "3b1cd17c-d186-4a74-86be-571a9fe256cd",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "374f198d-7939-45c1-b393-938b24a8d57d",
                            Email = "user@izkustvolandia.com",
                            EmailConfirmed = true,
                            FirstName = "Иван",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IZKUSTVOLANDIA.COM",
                            NormalizedUserName = "USER@IZKUSTVOLANDIA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEGZbYMo0hbY+38u1+vMUd2kK8f6NYGfOwfxun3s9jLlCjLYmKSHraSd2gos6+Xwokg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "fc4574b8-f5e4-40a8-bb0e-33e287922b80",
                            TwoFactorEnabled = false,
                            UserName = "user@izkustvolandia.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "6f2b469c-8e1d-4719-b0e8-1af005ed9060",
                            ConcurrencyStamp = "6f2b469c-8e1d-4719-b0e8-1af005ed9060",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "d1cca5f3-7195-4ba7-bcb9-c682e1f3d9c6",
                            RoleId = "6f2b469c-8e1d-4719-b0e8-1af005ed9060"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Cart", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Order", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.OrderProduct", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductDrawingTechnique", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.DrawingTechnique", "DrawingTechnique")
                        .WithMany()
                        .HasForeignKey("DrawingTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawingTechnique");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductGenre", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
