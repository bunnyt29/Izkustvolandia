// <auto-generated />
using System;
using Izkustvolandia.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Izkustvolandia.Migrations
{
    [DbContext(typeof(IzkustvolandiaDbContext))]
    [Migration("20250404122245_Seed 3 products")]
    partial class Seed3products
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Izkustvolandia.Domain.Cart", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("ProductId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.DrawingTechnique", b =>
                {
                    b.Property<int>("DrawingTechniqueId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrawingTechniqueId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DrawingTechniqueId");

                    b.ToTable("DrawingTechniques");

                    b.HasData(
                        new
                        {
                            DrawingTechniqueId = 1,
                            Name = "Маслени бои"
                        },
                        new
                        {
                            DrawingTechniqueId = 2,
                            Name = "Акварел"
                        },
                        new
                        {
                            DrawingTechniqueId = 3,
                            Name = "Темпера"
                        },
                        new
                        {
                            DrawingTechniqueId = 4,
                            Name = "Графика"
                        },
                        new
                        {
                            DrawingTechniqueId = 5,
                            Name = "Поантилизъм"
                        },
                        new
                        {
                            DrawingTechniqueId = 6,
                            Name = "Фреска"
                        },
                        new
                        {
                            DrawingTechniqueId = 7,
                            Name = "Гуаш"
                        },
                        new
                        {
                            DrawingTechniqueId = 8,
                            Name = "Пастел"
                        },
                        new
                        {
                            DrawingTechniqueId = 9,
                            Name = "Дигитална живопис"
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Genre", b =>
                {
                    b.Property<int>("GenreId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GenreId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("GenreId");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            Name = "Портрет"
                        },
                        new
                        {
                            GenreId = 2,
                            Name = "Пейзаж"
                        },
                        new
                        {
                            GenreId = 3,
                            Name = "Натюрморт"
                        },
                        new
                        {
                            GenreId = 4,
                            Name = "Историческа живопис"
                        },
                        new
                        {
                            GenreId = 5,
                            Name = "Религиозно изкуство"
                        },
                        new
                        {
                            GenreId = 6,
                            Name = "Жанрова живопис"
                        },
                        new
                        {
                            GenreId = 7,
                            Name = "Анималистика"
                        },
                        new
                        {
                            GenreId = 8,
                            Name = "Сюрреализъм"
                        },
                        new
                        {
                            GenreId = 9,
                            Name = "Абстрактно изкуство"
                        },
                        new
                        {
                            GenreId = 10,
                            Name = "Кубизъм"
                        },
                        new
                        {
                            GenreId = 11,
                            Name = "Импресионизъм"
                        },
                        new
                        {
                            GenreId = 12,
                            Name = "Неоимпресионизъм"
                        },
                        new
                        {
                            GenreId = 13,
                            Name = "Поп арт"
                        },
                        new
                        {
                            GenreId = 14,
                            Name = "Миниатюра"
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateOnly>("CreatedOn")
                        .HasColumnType("date");

                    b.Property<DateOnly>("DeliveryOn")
                        .HasColumnType("date");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("TotalSum")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("OrderId");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.OrderProduct", b =>
                {
                    b.Property<int>("OrderProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderProductId"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("OrderProductId");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderProducts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"));

                    b.Property<string>("Author")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Height")
                        .HasColumnType("float");

                    b.Property<string>("ImageUrls")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double>("Width")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            Author = "Анна Петрова",
                            CreatedOn = new DateTime(2024, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "Размер на платното 15х20 см. Продава се с рамка с дебелина 1 см. Нарисувана с акрилни бои върху платно с четка.",
                            Height = 20.0,
                            ImageUrls = "[\"mother-product-2-1.jpg\",\"mother-product-2-2.jpg\",\"mother-product-2-3.jpg\",\"mother-product-2-4.jpg\",\"mother-product-2-5.jpg\",\"mother-product-2-6.jpg\",\"mother-product-2-7.jpg\"]",
                            IsDeleted = false,
                            Name = "Майчина милувка 3",
                            Price = 120.00m,
                            Width = 15.0
                        },
                        new
                        {
                            ProductId = 2,
                            Author = "Анна Петрова",
                            CreatedOn = new DateTime(2024, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Майчина милувка“ 5 е емоционална и изразителна картина, нарисувана с акрилни бои върху платно с помощта на четка и шпакли. Комбинацията от деликатни мазки и богата текстура придава дълбочина и характер на всяка линия. Платното е с размер 18х24 см и се предлага с елегантна рамка с дебелина 2 см, която допълва усещането за завършеност и уют.",
                            Height = 24.0,
                            ImageUrls = "[\"mother-product-1-1.jpg\",\"mother-product-1-2.jpg\",\"mother-product-1-3.jpg\",\"mother-product-1-4.jpg\"]",
                            IsDeleted = false,
                            Name = "Майчина милувка 5",
                            Price = 160.00m,
                            Width = 18.0
                        },
                        new
                        {
                            ProductId = 3,
                            Author = "Мария Николова",
                            CreatedOn = new DateTime(2024, 3, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Една“ 1 е елегантна творба, носеща усещане за нежност и самота. Създадена с акрилни бои върху платно, картината съчетава фини четкови мазки и текстури, постигнати с помощта на шпакли. Размерът ѝ е 15х20 см, а рамката с дебелина 1 см придава завършен и стилен вид.",
                            Height = 20.0,
                            ImageUrls = "[\"one-1-product-4-1.jpg\",\"one-1-product-4-2.jpg\",\"one-1-product-4-3.jpg\",\"one-1-product-4-4.jpg\",\"one-1-product-4-5.jpg\",\"one-1-product-4-6.jpg\",\"one-1-product-4-7.jpg\"]",
                            IsDeleted = false,
                            Name = "Една 1",
                            Price = 110.00m,
                            Width = 15.0
                        },
                        new
                        {
                            ProductId = 4,
                            Author = "Никол Симеонова",
                            CreatedOn = new DateTime(2024, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Една“ е картина, която разказва история чрез усещане и текстура. Създадена с акрилни бои върху платно, комбинира изразителни четкови мазки и грубата чувственост на шпаклата. Композицията е с размер 15х20 см и е обрамчена с деликатна 1-сантиметрова рамка, която подчертава емоционалната ѝ наситеност.",
                            Height = 20.0,
                            ImageUrls = "[\"one-product-3-1.jpg\",\"one-product-3-2.jpg\",\"one-product-3-3.jpg\",\"one-product-3-4.jpg\",\"one-product-3-5.jpg\",\"one-product-3-6.jpg\"]",
                            IsDeleted = false,
                            Name = "Една",
                            Price = 105.00m,
                            Width = 15.0
                        },
                        new
                        {
                            ProductId = 5,
                            Author = "Елеонора Костова",
                            CreatedOn = new DateTime(2024, 3, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Ти и аз“ 6 е нежна и хармонична картина, изразяваща силата на връзката между две души. Нарисувана с акрилни бои върху платно, използвайки фини четки, тя създава усещане за близост и топлина. Композицията е с квадратна форма – 20х20 см – и се предлага с елегантна рамка с дебелина 2 см, която допълва усещането за завършеност.",
                            Height = 20.0,
                            ImageUrls = "[\"you-and-me-product-5-1.jpg\",\"you-and-me-product-5-2.jpg\",\"you-and-me-product-5-3.jpg\",\"you-and-me-product-5-4.jpg\",\"you-and-me-product-5-5.jpg\",\"you-and-me-product-5-6.jpg\"]",
                            IsDeleted = false,
                            Name = "Ти и аз 6",
                            Price = 135.00m,
                            Width = 20.0
                        },
                        new
                        {
                            ProductId = 6,
                            Author = "Стефан Велинов",
                            CreatedOn = new DateTime(2024, 3, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„Релакс“ 2 е съвременна композиция, която улавя спокойствието на един миг на уединение. Картината е изпълнена с акрилни бои върху платно, използвайки изразителни движения на шпаклата, което ѝ придава характер и дълбочина. С размер 20х25 см и стилна рамка с дебелина 2 см, творбата е подходящ акцент за всеки уютен интериор.",
                            Height = 25.0,
                            ImageUrls = "[\"relax-product-6-1.jpg\",\"relax-product-6-2.jpg\",\"relax-product-6-3.jpg\",\"relax-product-6-4.jpg\",\"relax-product-6-5.jpg\",\"relax-product-6-6.jpg\"]",
                            IsDeleted = false,
                            Name = "Релакс 2",
                            Price = 145.00m,
                            Width = 20.0
                        },
                        new
                        {
                            ProductId = 7,
                            Author = "Валери Димитров",
                            CreatedOn = new DateTime(2024, 3, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Description = "„В гората“ 2 е живописен пейзаж, който пренася зрителя в сърцето на природата. Нарисувана с акрилни бои върху платно с помощта на четка и шпакли, картината комбинира фини детайли с богата текстура, за да улови магията на горската тишина. С размер 30х40 см и елегантна рамка с дебелина 2 см, творбата е идеален избор за любителите на природата и уюта.",
                            Height = 40.0,
                            ImageUrls = "[\"in-the-forest-product-7-1.jpg\",\"in-the-forest-product-7-2.jpg\",\"in-the-forest-product-7-3.jpg\",\"in-the-forest-product-7-4.jpg\",\"in-the-forest-product-7-5.jpg\",\"in-the-forest-product-7-6.jpg\"]",
                            IsDeleted = false,
                            Name = "В гората 2",
                            Price = 180.00m,
                            Width = 30.0
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductDrawingTechnique", b =>
                {
                    b.Property<int>("DrawingTechniqueId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("DrawingTechniqueId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductDrawingTechniques");

                    b.HasData(
                        new
                        {
                            DrawingTechniqueId = 2,
                            ProductId = 1
                        },
                        new
                        {
                            DrawingTechniqueId = 3,
                            ProductId = 2
                        },
                        new
                        {
                            DrawingTechniqueId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            DrawingTechniqueId = 2,
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductGenre", b =>
                {
                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("GenreId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductGenres");

                    b.HasData(
                        new
                        {
                            GenreId = 1,
                            ProductId = 1
                        },
                        new
                        {
                            GenreId = 4,
                            ProductId = 2
                        },
                        new
                        {
                            GenreId = 1,
                            ProductId = 3
                        },
                        new
                        {
                            GenreId = 5,
                            ProductId = 4
                        });
                });

            modelBuilder.Entity("Izkustvolandia.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "7f3df201-e2bb-4e04-adfe-850e5e90e516",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aca7f32e-74b8-4b79-b8c1-381c20dfe410",
                            Email = "admin@izkustvolandia.com",
                            EmailConfirmed = true,
                            FirstName = "Иван",
                            LastName = "Иванов",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@IZKUSTVOLANDIA.COM",
                            NormalizedUserName = "ADMIN@IZKUSTVOLANDIA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEF9jVs79xpq8M5GcG2uCeGxGcrqKcQ9gcdhVeuwGXFp36NXdCPOANhSWLIo+lQQDQQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5c5138f-9422-4b37-95ad-02fdede5a16a",
                            TwoFactorEnabled = false,
                            UserName = "admin@izkustvolandia.com"
                        },
                        new
                        {
                            Id = "a47104f0-5e37-4158-ab05-6c7e98a3ec94",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "aa84e89c-eb96-4266-9485-959ec3fbe488",
                            Email = "user@izkustvolandia.com",
                            EmailConfirmed = true,
                            FirstName = "Иван",
                            LastName = "Георгиев",
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@IZKUSTVOLANDIA.COM",
                            NormalizedUserName = "USER@IZKUSTVOLANDIA.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEJCb3k/XRiErwSmhYD+QUQi127M0frgLeEpeNiz5pLjZ6/l9IpY7OA4/+5kGLpywow==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "25f38192-6cbc-4f35-9c90-40ee9006a790",
                            TwoFactorEnabled = false,
                            UserName = "user@izkustvolandia.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "94f56cc5-45eb-423a-86bc-487a697ae173",
                            ConcurrencyStamp = "94f56cc5-45eb-423a-86bc-487a697ae173",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7f3df201-e2bb-4e04-adfe-850e5e90e516",
                            RoleId = "94f56cc5-45eb-423a-86bc-487a697ae173"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Cart", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Order", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.OrderProduct", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.Order", "Order")
                        .WithMany("OrderProducts")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany("OrderProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductDrawingTechnique", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.DrawingTechnique", "DrawingTechnique")
                        .WithMany()
                        .HasForeignKey("DrawingTechniqueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DrawingTechnique");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.ProductGenre", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Izkustvolandia.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Order", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.Product", b =>
                {
                    b.Navigation("OrderProducts");
                });

            modelBuilder.Entity("Izkustvolandia.Domain.User", b =>
                {
                    b.Navigation("Orders");
                });
#pragma warning restore 612, 618
        }
    }
}
